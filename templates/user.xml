<templateSet group="user">
  <template name="classcomponent" value="import React, { Component } from 'react';&#10;&#10;interface IProps {&#10;  [x: string]: any;&#10;}&#10;&#10;interface IState {&#10;  [x: string]: any;&#10;}&#10;&#10;export default class ComponentName extends Component&lt;IProps, IState&gt; {&#10;  state = {};&#10;&#10;  constructor(props) {&#10;    super(props);&#10;  }&#10;&#10;  render() {&#10;    return (&#10;      &lt;div&gt;&#10;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;}" description="React Typescript class component template" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="styled" value="import styled from 'styled-components';&#10;&#10;export const StyledComponent = styled.div&lt;any&gt;`&#10;&#10;`;&#10;" description="Typescript Styled Component Template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="container" value="import { IApplicationState } from '~/core/reducer';&#10;&#10;export const mapStateToProps = (state: IApplicationState) =&gt; {&#10;  const {&#10;&#10;  } = state;&#10;&#10;  return {};&#10;};&#10;&#10;export const mapDispatchToProps = dispatch =&gt; ({&#10;  someFunction(data) {&#10;    dispatch(someFunction(data));&#10;  },&#10;});&#10;" description="Redux typescript container boilerplate" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="sfc" value="import React, { FunctionComponent } from 'react';&#10;&#10;interface IProps {&#10;  palette: string;&#10;}&#10;&#10;const ComponentName: FunctionComponent&lt;IProps&gt; = (props) =&gt; {&#10;  return (&#10;    &lt;div&gt;&#10;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;ComponentName.defaultProps = {&#10;&#10;};&#10;&#10;export default ComponentName;&#10;" description="React Stateless Component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="compasync" value="import React, { useState, useEffect, FunctionComponent } from 'react';&#10;import { connect } from 'react-redux';&#10;// import { mapStateToProps, mapDispatchToProps } from './container';&#10;&#10;interface IComponentProps {&#10;  palette?: string;&#10;}&#10;&#10;interface IContainerProps {&#10;  token?: string;&#10;}&#10;&#10;type IProps = IComponentProps &amp; IContainerProps;&#10;&#10;interface IState {&#10;  isLoading: boolean;&#10;  hasError: boolean;&#10;}&#10;&#10;const MyComponent: FunctionComponent&lt;IProps&gt; = (props) =&gt; {&#10;  const {} = props;&#10;&#10;  const [state, setState]: [IState, (...args) =&gt; any] = useState({&#10;    isLoading: false,&#10;    hasError: false,&#10;  });&#10;&#10;  /* Component Did Mount */&#10;  useEffect(() =&gt; {&#10;    async function run() {&#10;      const { token } = props;&#10;      try {&#10;        setState({ isLoading: true });&#10;        /* Run async actions here */&#10;      } catch (ex) {&#10;        console.log('Error fetching data: ', ex);&#10;        setState({ isLoading: false, hasError: true });&#10;      }&#10;    }&#10;    run();&#10;  }, []);&#10;&#10;  const {&#10;    isLoading,&#10;    hasError,&#10;  } = state;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;MyComponent.defaultProps = {&#10;  palette: 'primary',&#10;  token: '',&#10;}&#10;&#10;// export default connect(mapStateToProps, mapDispatchToProps)(MyComponent) as typeof MyComponent;&#10;export default MyComponent;" description="React Async Hooks component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="component" value="import React, { useState, FunctionComponent } from 'react';&#10;&#10;interface IProps {&#10;  palette?: string;&#10;}&#10;&#10;interface IState {&#10;  [x: string]: any;&#10;}&#10;&#10;const MyComponent: FunctionComponent&lt;IProps&gt; = (props) =&gt; {&#10;  const [state, setState]: [IState, (...args) =&gt; any] = useState({});&#10;&#10;  const {} = props;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;MyComponent.defaultProps = {&#10;  palette: 'primary',&#10;}&#10;&#10;export default MyComponent;" description="React hooks functional component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>